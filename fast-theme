# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# Copyright (c) 2018 Sebastian Gniazdowski
#
# Theme support using ini-files.
#

zmodload zsh/zutil 2>/dev/null

emulate -LR zsh
setopt extendedglob typesetsilent warncreateglobal

local OPT_HELP OPT_VERBOSE OPT_QUIET OPT_RESET OPT_LIST OPT_TEST OPT_SECONDARY
local -A opthash
zparseopts -E -D -A opthash h -help v -verbose q -quiet r -reset l -list t -test -secondary || { echo "Improper options given, see help (-h/--help)"; return 1; }

(( ${+opthash[-h]} + ${+opthash[--help]} ))    && OPT_HELP="-h"
(( ${+opthash[-v]} + ${+opthash[--verbose]} )) && OPT_VERBOSE="-v"
(( ${+opthash[-q]} + ${+opthash[--quiet]} ))   && OPT_QUIET="-q"
(( ${+opthash[-r]} + ${+opthash[--reset]} ))   && OPT_RESET="-r"
(( ${+opthash[-l]} + ${+opthash[--list]} ))    && OPT_LIST="-l"
(( ${+opthash[-t]} + ${+opthash[--test]} ))    && OPT_TEST="-t"
(( ${+opthash[--secondary]} ))                 && OPT_SECONDARY="--secondary"

[[ -n "$OPT_RESET" ]] && { command rm -f "$FAST_BASE_DIR"/{current_theme.zsh,secondary_theme.zsh}; [[ -z "$OPT_QUIET" ]] && print "Reset done (no theme is now set, restart is required)"; return 0; }

[[ -n "$OPT_LIST" ]] && {
    [[ -z "$OPT_QUIET" ]] && print -r -- "Available themes:"
    print -rl -- "$FAST_BASE_DIR"/themes/*.ini(:t:r)
    return 0
}

[[ -n "$OPT_HELP" ]] && {
    print -r -- "Usage: fast-theme [-h/--help] [-v/--verbose] [-q/--quiet] [-t/--test] <theme-name|theme-path>"
    print -r -- "       fast-theme [-r/--reset] [-l/--list]"
    print -r -- ""
    print -r -- "Default action (after providing <theme-name> or <theme-path>) is to switch current session"
    print -r -- "and any future sessions to the new theme. Using <theme-path>, i.e. a path to an ini file"
    print -r -- "means using custom, own theme. The path can use an \"XDG:\" shorthand (e.g. \"XDG:mytheme\")"
    print -r -- "that will point to ~/.config/fsh/<theme>.ini (or \$XDG_CONFIG_HOME/fsh/<theme>.ini in general"
    print -r -- "if the variable is set in the environment). If the INI file pointed in the path is \"overlay\","
    print -r -- "then it is not a full theme, but an additional theme-snippet that overwrites only selected"
    print -r -- "styles of the main theme."
    print -r -- ""
    print -r -- "Other path-shorthands:"
    print -r -- "LOCAL: = /usr/local/share/fsh/"
    print -r -- "HOME: = $HOME/.fsh/"
    print -r -- "OPT: = /opt/local/share/fsh/"
    print -r -- ""
    print -r -- "-r/--reset     - unset any theme, use default highlighting (requires restart)"
    print -r -- "-R/--ov-reset  - unset overlay, use styles only from main-theme (requires restart)"
    print -r -- "-l/--list      - list names of available themes"
    print -r -- "-t/--test      - show test block of code after switching theme"
    return 0
}

[[ -z "$1" ]] && { print -u2 "Provide a theme (its name or path to its file) to switch to, aborting (see -h/--help)"; return 1; }

# FAST_HIGHLIGHT_STYLES key onto ini-file key
local -A map
map=(
    default                     -
    unknown-token               -
    reserved-word               -
    alias                       -
    suffix-alias                -
    builtin                     -
    function                    -
    command                     -
    precommand                  -
    commandseparator            -
    hashed-command              -
    path                        -
    path_pathseparator          pathseparator
    globbing                    -
    history-expansion           -
    single-hyphen-option        -
    double-hyphen-option        -
    back-quoted-argument        -
    single-quoted-argument      -
    double-quoted-argument      -
    dollar-quoted-argument      -
    back-or-dollar-double-quoted-argument   -
    back-dollar-quoted-argument             -
    assign                      -
    redirection                 -
    comment                     -
    variable                    -
    mathvar                     -
    mathnum                     -
    matherr                     -
    assign-array-bracket        -
    for-loop-variable           forvar
    for-loop-number             fornum
    for-loop-operator           foroper
    for-loop-separator          forsep
    exec-descriptor             -
    here-string-tri             -
    here-string-word            -
    secondary                   -
    case-input                  -
    case-parentheses            -
    case-condition              -
    correct-subtle              -
    incorrect-subtle            -
    subtle-bg                   -
    path-to-dir                 -
    paired-bracket              -
    bracket-level-1             -
    bracket-level-2             -
    bracket-level-3             -
    global-alias                -
)

# In which order to generate entries
local -a order
order=( 
    default unknown-token reserved-word alias suffix-alias builtin function command precommand 
    commandseparator hashed-command path path_pathseparator globbing history-expansion 
    single-hyphen-option double-hyphen-option back-quoted-argument single-quoted-argument 
    double-quoted-argument dollar-quoted-argument back-or-dollar-double-quoted-argument 
    back-dollar-quoted-argument assign redirection comment variable mathvar 
    mathnum matherr assign-array-bracket for-loop-variable for-loop-number for-loop-operator
    for-loop-separator exec-descriptor here-string-tri here-string-word secondary
    case-input case-parentheses case-condition correct-subtle incorrect-subtle subtle-bg
    path-to-dir paired-bracket bracket-level-1 bracket-level-2 bracket-level-3
    global-alias
)

[[ -n "$OPT_VERBOSE" ]] && print "Number of styles available for customization: ${#order}"

# Named colors
local -a color
color=( red green blue yellow cyan magenta black white )

#
# Execution starts here
#

local -A out
local THEME_NAME
if [[ "$1" = */* || "$1" = (XDG|LOCAL|HOME|OPT):* ]]; then
    1="${${1/(#s)XDG:/${${XDG_CONFIG_HOME:-$HOME/.config}%/}/fsh/}%.ini}.ini"
    1="${${1/(#s)LOCAL://usr/local/share/fsh/}%.ini}.ini"
    1="${${1/(#s)HOME:/$HOME/.fsh/}%.ini}.ini"
    1="${${1/(#s)OPT://opt/local/share/fsh/}%.ini}.ini"
    1=${~1} # allow user to quote ~

    [[ ! -f "$1" ]] && { print -u2 "No such theme \`$1', aborting"; return 1; }
    [[ ! -r "$1" ]] && { print -u2 "Theme \`$1' unreadable, aborting"; return 1; }

    THEME_NAME="${1:t:r}"
    fast-read-ini-file "$1" out ""
else
    [[ ! -f "$FAST_BASE_DIR/themes/$1.ini" ]] && { print -u2 "No such theme \`$1', aborting"; return 1; }
    [[ ! -r "$FAST_BASE_DIR/themes/$1.ini" ]] && { print -u2 "Theme \`$1' unreadable, aborting"; return 1; }

    THEME_NAME="$1"
    fast-read-ini-file "$FAST_BASE_DIR/themes/$1.ini" out ""
fi

[[ -z "$OPT_SECONDARY" ]] && local outfile="current_theme.zsh" || local outfile="secondary_theme.zsh"
command rm -f "$FAST_BASE_DIR"/"$outfile"

# Set a zstyle and a parameter to carry theme name
if [[ -z "$OPT_SECONDARY" ]]; then
    print -r -- 'zstyle :plugin:fast-syntax-highlighting theme "'"$THEME_NAME"'"' >>! "$FAST_BASE_DIR"/"$outfile"
    print -r -- 'typeset -g FAST_THEME_NAME="'"$THEME_NAME"'"' >>! "$FAST_BASE_DIR"/"$outfile"
    zstyle :plugin:fast-syntax-highlighting theme "$THEME_NAME"
    FAST_THEME_NAME="$THEME_NAME"
else
    local FAST_THEME_NAME="$THEME_NAME"
fi

# Generate current_theme.zsh or secondary_theme.zsh, traversing ini-file associative array
local k kk
local inikey inival result
for k in "${order[@]}"; do
    [[ "${map[$k]}" = "-" ]] && kk="$k" || kk="${map[$k]}"
    inikey="${out[(i)<*>_${kk}]}"
    inival="${out[$inikey]}"
    if [[ "$k" = "secondary" && -z "$OPT_SECONDARY" && -n "$inival" ]]; then
        fast-theme -q --secondary "$inival"
    fi
    if [[ "$inival" = bg:* ]]; then
        result="bg=${inival#bg:}"
    else
        if [[ "$inival" = (${(~j:|:)color})* || "$inival" = [0-9]##* ]]; then
            result="fg=$inival"
        else
            result="$inival"
        fi
    fi

    print -r -- ': ${FAST_HIGHLIGHT_STYLES['"${FAST_THEME_NAME}$k"']:='"$result"'}' >>! "$FAST_BASE_DIR"/"$outfile"
    FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}$k]="$result"
done

[[ -z "$OPT_QUIET" ]] && print "Switched to theme \`$THEME_NAME' (current session, and future sessions)"

[[ -n "$OPT_TEST" ]] && {
    print -zr '
# This is an example code that is diverse and allows to test a theme
text="An example quite long string $with variable in it"
local param1="text $variable" param2='"'"'other $variable'"'"'
math=$(( 10 + HISTSIZ + HISTSIZE + $SAVEHIST )) size=$(( 0 ))

for (( ii = 1; ii <= size; ++ ii )); do
    if [[ "${cmds[ii]} string" = "| string" ]]
    then
        sidx=${buffer[(in:ii:)\$\(?#[^\\\\]\)]} # find opening cmd-subst
        (( sidx <= len )) && {
            eidx=${buffer[(b:sidx:ii)[^\\\\]\)]} # find closing cmd-subst
        }
    fi
done

'
}

return 0
# vim:ft=zsh:et:sw=4:sts=4
